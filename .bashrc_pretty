#!/bin/bash -eu
# -----------------------------------------------------------------------------------------------
#
# ~/config/.bashrc_pretty
#
# Purpose: define and load advanced functions for interactive shell sessions, including
#   "pretty-print" formatting
#
# Apr 2023 JCL
#
# -----------------------------------------------------------------------------------------------

TAB=${TAB=''}

# add read-only variable to check if this file has already been loaded
# if the argument '-f' is used, force loading the file
if [[ "$@" == "-f" ]];then
    cmd=decho
    if ! command -v $cmd &>/dev/null; then
        cmd=echo
    fi
    $cmd "${TAB}reloading ${BASH_SOURCE##*/}"
else
    if [ ! -z ${FPRETTY_LOADED+dummy} ]; then
        if [ ! -z "$(declare -f print_pretty_cbar)" ]; then
            decho "${TAB}"$(print_pretty "${BASH_SOURCE##*/} already loaded")
            return 0
        fi
    fi
fi

# set debug level
declare -i DEBUG=${DEBUG:=0} # assign default value if DEBUG is unset or null

# If running interactively, print source
if [[ "$-" == *i* ]] && [ ${DEBUG:-0} -gt 0 ]; then
    echo -e "${TAB:=$(for ((i = 1; i < ${#BASH_SOURCE[@]}; i++)); do echo -n "   "; done)}\E[2m${#BASH_SOURCE[@]}: ${BASH_SOURCE##*/} -> $(readlink -f ${BASH_SOURCE})\E[22m"
fi

# This function defines and exports:
#   N_BASH - the size of the execution stack; position source in stack
#   src_name - canonical source file name
#   src_base - short source file name
#   src_dir_phys - canonical/physical source file path
#   src_dir_logi - logical source file path (link name, if applicable)

function get_source() {
    # get the length of the execution stack
    N_BASH=${#BASH_SOURCE[@]}
    # since this function is part of the stack, reduce N_BASH by one
    ((N_BASH--))
    # check stack size
    if [ $N_BASH -lt 1 ]; then
        return 0
    fi

    # define function level
    local -i FUNC_LEV
    # check if calling function is print*
    if [[ "${FUNCNAME[1]}" =~ "print"* ]]; then
        if [ $N_BASH -lt 2 ]; then
            return 0
        fi
        FUNC_LEV=2
    else
        FUNC_LEV=1
    fi

    # get canonical source name
    src_name=$(readlink -f ${BASH_SOURCE[${FUNC_LEV}]})
    # get short source name
    src_base=$(basename "${src_name}")
    # get source path
    ## physical (canonical)
    src_dir_phys=$(dirname "$src_name")
    ## logical (links)
    src_dir_logi=$(dirname "${BASH_SOURCE[${FUNC_LEV}]}")
}

# load or re-load libraries and reset TAB and DEBUG
function load_libs() {
    get_source
    # if running from bash, reset TAB and DEBUG
    if [ $N_BASH -eq 1 ]; then
        local did_print=false
        # reset TAB
        if [ -z ${TAB+dummy} ] || [ ${#TAB} -gt 0 ]; then
            if command -v rtab &>/dev/null; then
                [ ${did_print:-false} == false ] && echo "resetting..."
                did_print=true
                rtab
                echo -ne "$fTAB"
                print_tab
            else
                export TAB=
                echo -ne "${fTAB:=   }"
                echo -e "${BOLD}TAB is ${NULL}z"
            fi
        fi
        # reset DEBUG
        if [ -z ${DEBUG+dummy} ] || [ ${DEBUG:=0} -gt 0 ]  ; then
            if command -v rdb &>/dev/null; then
                [ ${did_print:-false} == false ] && echo "resetting..."
                echo -ne "$fTAB"
                rdb
            else
                DEBUG=0
            fi
        fi
    fi

    if command -v decho &>/dev/null; then
        # print function name
        decho -e "${TAB}${INVERT}${FUNCNAME}${RESET}"
    fi

    # load bash utils
    local fname
    local library
    get_source
    for library in links \
                       traps\
                       tabs \
                       cond_echo \
                       fmt \
                       colors \
                       stack \
                       dbg \
                       test
    do
        # use the canonical (physical) source directory for reference; this is important if sourcing
        # this file directly from shell
        fname="${src_dir_phys}/lib_${library}.sh"
        if [ -e "${fname}" ]; then
            if [[ "$-" == *i* ]] && [ ${DEBUG:-0} -gt 0 ]; then
                echo "${TAB}loading $(basename ${fname})"
            fi
            source ${fname}
        else
            echo "${fname} not found"
        fi
    done
    fname="${HOME}/utils/bash/git/lib_git.sh"
    if [ -e "${fname}" ]; then
        if [[ "$-" == *i* ]] && [ ${DEBUG:-0} -gt 0 ]; then
            echo "${TAB}loading $(basename ${fname})"
        fi
        source ${fname}
    fi

    if [ ! -z ${FPRETTY_LOADED+dummy} ]; then
        if [[ "$-" == *i* ]]; then
            cbar "${BOLD}libraries loaded${NORMAL}" # lib_fmt
        fi
        if [ ${DEBUG:-0} -gt 1 ]; then
            lecho # lib_dbg
            print_ribbon #lib_stack
            print_return # lib_traps
        fi
    fi
    load_colors
}

load_libs

# determine if script is being sourced or executed and add conditional behavior
if (return 0 2>/dev/null); then
    :
else
    # exit on errors
    set -e
fi

# check if running interactively
if [[ "$-" == *i* ]]; then
    set_tab
    print_ribbon
    decho "${TAB}${BASH_SOURCE##*/}: DEBUG = $DEBUG"
    #print_bar
    print_source
fi

print_pretty_status

# determine if script is being sourced or executed
if (return 0 2>/dev/null); then
    return 0
else
    exit 0
fi
