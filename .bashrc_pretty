#!/bin/bash -eu
# -----------------------------------------------------------------------------------------------
#
# ~/config/.bashrc_pretty
#
# Purpose: define and load advanced functions for interactive shell sessions, including
#   "pretty-print" formatting
#
# Apr 2023 JCL
#
# -----------------------------------------------------------------------------------------------

# add read-only variable to check if this file has already been loaded
if [ -z ${FPRETTY_LOADED+dummy} ]; then      
    declare -grx FPRETTY_LOADED=true
else
    if [ ! -z "$(declare -f print_pretty_cbar)" ]; then 
        decho "${TAB}${BASH_SOURCE##*/} already loaded"
        return
    fi
fi    

# set debug level
declare -i DEBUG=${DEBUG:=0} # default value if DEBUG is unset or null

# If running interactively, print source
if [[ "$-" == *i* ]] && [ ${DEBUG:-0} -gt 0 ]; then
    echo -e "${TAB:=$(for ((i = 1; i < ${#BASH_SOURCE[@]}; i++)); do echo -n "   "; done)}\E[2m${#BASH_SOURCE[@]}: ${BASH_SOURCE##*/} -> $(readlink -f ${BASH_SOURCE})\E[22m"
fi

function load_libs() {
    # load bash utils
    local fname
    local library    
    for library in lib_links.sh \
                    lib_traps.sh\
                    lib_tabs.sh \
                    lib_cond_echo.sh \
                    lib_fmt.sh \
                    lib_colors.sh \
                    lib_stack.sh
    do
        # use the canonical (physical) source directory for reference; this is important if sourcing
        # this file directly from shell

        # get canonical source name
        src_name=$(readlink -f ${BASH_SOURCE[${FUNC_LEV}]})
        # get physical (canonical) source directory
        src_dir_phys=$(dirname "$src_name")
        # define library path
        fname="${src_dir_phys}/${library}"
        if [ -e "${fname}" ]; then
            if [[ "$-" == *i* ]] && [ ${DEBUG:-0} -gt 0 ]; then
                echo "${TAB}loading $(basename ${fname})"
            fi
            source ${fname}
        else
            echo "${fname} not found"
        fi
    done
}

load_libs

# determine if script is being sourced or executed and add conditional behavior
if (return 0 2>/dev/null); then
    :
else
    # exit on errors
    set -e
fi

# check if running interactively
if [[ "$-" == *i* ]]; then
    #set tab
    set_tab
    decho "${TAB}${BASH_SOURCE##*/}: DEBUG = $DEBUG"
    #print_ribbon
    #print_bar

    # determine if script is being sourced or executed
    if (return 0 2>/dev/null); then
        RUN_TYPE="sourcing"
    else
        RUN_TYPE="executing"
    fi
    print_source
fi

if [[ "$-" == *i* ]] && [ ${DEBUG:-0} -gt 0 ]; then
    print_pretty_cbar
fi
