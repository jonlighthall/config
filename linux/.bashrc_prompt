# -----------------------------------------------------------------------------------------------
# LINUX KERNEL PROMPT SETTINGS
# -----------------------------------------------------------------------------------------------
# ~/config/linux/.bashrc_prompt
#
# Purpose: Define prompt and path settings for interactive shells on linux kernel systems
#
# Note: this file must use unix line endings (LF)!
#
# Aug 2023 JCL
#
# -----------------------------------------------------------------------------------------------

if [ -z ${VB:+dummy} ]; then
    export VB=false
else
    if [ "${VB}" = true ]; then
        # load formatting
        fpretty=${HOME}/config/.bashrc_pretty
        if [ -e $fpretty ]; then
            source $fpretty            
            print_ribbon
        fi
        # determine if being sourced or executed
        if (return 0 2>/dev/null); then
            RUN_TYPE="sourcing"
        else
            RUN_TYPE="executing"
        fi
        print_source
    fi
fi

# System-specific aliases and functions

# Prompt functions
git_branch() {
    if  command -v git &>/dev/null; then
	      git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \x1B[0;36m(\1\x1B[0;36m)\x1B[0m/'
	      # 2>/dev/null redirects stderr to null
	      # sed -e '/^[^*]/d' deletes any lines not starting with *
	      # sed -e 's/* \(.*\)/ (\1)/' replaces the first instance of '* ' and add parethesis
    fi
}

# get screen process ID
screen_pid() {
    # check if screen command is defined
    if  command -v screen &>/dev/null; then
        # check if STY var is set
	      if [ ! -z "${STY+dummy}" ]; then
            # add screen PID to command prompt
	          echo ${STY} | cut -d "." -f1 | sed 's/.*/ \x1B[1;35mscreen &\x1B[0m/'
	      fi
    fi
}

tmux_ses() {
    if  command -v tmux &>/dev/null; then
	      if [ "$TERM" = "screen" ] && [ -n "$TMUX" ]; then
	          tmux display-message -p '#S' | sed 's/.*/ \x1B[1;35mtmux &\x1B[0m/'
	      fi
    fi
}

sh_lvl() {
    if [ "$SHLVL" -gt 1 ]; then
	      echo -en " \x1B[1;31mLVL${SHLVL}\x1B[0m"
    fi
}

if [ "${VB}" = true ]; then
    echo "${TAB}Setting prompt..."
    itab
fi

vecho -n "${TAB}Checking Git... "
if  command -v git &>/dev/null; then
    if [ -z $(git_branch) ]; then
	      vecho "not in repository"
    else
	      vecho -e "on\e[0;36m$(git_branch)\e[0m branch"
    fi
else
    vecho -e "${BAD}FAIL${RESET} Git not defined"
    git_branch() {
	      return 0
    }
fi

vecho -n "${TAB}Checking screen session... "
if  command -v screen &>/dev/null; then
    if [ -z "$STY" ]; then
	      vecho "not in screen"
    else
	      vecho -e "in screen session$(screen_pid)"
    fi
else
    vecho -e "${BAD}FAIL${RESET} screen not defined"
    screen_pid() {
	      return 0
    }
fi

vecho -n "${TAB}Checking tmux session... "
if  command -v tmux &>/dev/null; then
    if [ "$TERM" = "screen" ] && [ -n "$TMUX" ]; then
	      vecho -e "in tmux session$(tmux_ses)"
    else
	      vecho "not in tmux"
    fi
else
    vecho -e "${BAD}FAIL${RESET} tmux not defined"
    tmux_ses() {
	      return 0
    }
fi

# define prompt
#export PS1='\[\e[1;32m\]\u@\h\[\e[0m\]:\[\e[1;34m\]\w\[\e[0m\]\$' # default
#export PS1='\[\e[0;32m\]\$\[\e[0m\] ' # stark
#export PS1='\[\e[1;32m\][\u@\h \[\e[34m\]\W$(git_branch)\e[1;32m]$\[\e[0m\] ' # user, host, base dir, branch
#export PS1='\[\e[1;32m\][\u@\h \[\e[34m\]\w$(git_branch)\e[1;32m]\n$\[\e[0m\] ' # full dir, prompt on new line
#export PS1='\[\e[1;32m\][\u@\h \[\e[34m\]\w$(git_branch)\e[32m]\n\[\e[0;37m\]\A\[\e[0;32m\] $\[\e[0m\] ' # time, prompt on new line
#export PS1='\[\e[0;37m\]\A\[\e[1;32m\] [\u@\h \[\e[34m\]\w$(git_branch)\[\e[32m\]]$\[\e[0m\] ' # time, prompt on same line
#export PS1='\[\e[0;37m\]\A\[\e[1;32m\] \u@\h \[\e[34m\]\w$(git_branch)\[\e[32m\]\n$\[\e[0m\] ' # time before, new line, no brackets
#export PS1='\[\e[0;37m\]\A\[\e[1;32m\] \u@\[\e[1;35m\]\h\[\e[1;34m\] \w$(git_branch)\[\e[32m\]\n$\[\e[0m\] ' # time before, new line, no brackets, highlight host
# export PS1='\[\e[0;37m\]\A\[\e[0;32m\] \u@\[\e[1;34m\]\h\[\e[0;33m\] \w$(git_branch)\[\e[0;32m\]\n$\[\e[0m\] ' # time before, new line, no brackets, highlight host, git bash color
#export PS1='\[\e[0;37m\]\A\[\e[0;32m\] \u@\[\e[1;34m\]\h$(screen_pid)$(tmux_ses)\[\e[0;33m\] \w$(git_branch)\[\e[0;32m\]\n$\[\e[0m\] ' # time before, new line, no brackets, highlight host, git bash color
export PS1='\[\e[0;37m\]\A\[\e[0;32m\] \u@\[\e[1;34m\]\h$(screen_pid)$(tmux_ses)\[\e[0;33m\] \w$(git_branch)$(sh_lvl)\[\e[0;32m\]\n$\[\e[0m\] ' # time before, new line, no brackets, highlight host, git bash color, shlvl

# Macros
alias naut='nautilus --no-desktop --browser ./ &'
alias term='gnome-terminal &'

## option switches
do_test_git=true
do_test_color=true
do_load_pgi=false
do_load_nvidia=false

# Test Git
if $do_test_git; then
    vecho -n "${TAB}Testing Git prompt... "
    # first, check if git is defined
    if  command -v git &>/dev/null; then
	      # then, see if git is slow
	      timeout -s 9 1s git branch &>/dev/null
	      RETVAL=$?
	      if [[ $RETVAL -eq 137 || $RETVAL -eq 127 ]]; then
	          vecho -e "\n RETVAL = $RETVAL"
	          vecho " git branch ${BAD}timed out${RESET}"
	          git_bad=true
	      else
	          vecho -e "${GOOD}OK${RESET} ${GRAY}RETVAL=$RETVAL${RESET}"
	          git_bad=false
	      fi
    else
	      vecho -e "${BAD}FAIL${RESET} Git not defined"
	      git_bad=true
    fi
    if $git_bad; then
	      git_branch() {
	          return 0
	      }
	      echo -e "${TAB}${fTAB}git branch removed from prompt"
    fi
fi
if [ "${VB}" = true ]; then
    dtab
fi

# Test ls color
if $do_test_color; then
    vecho -e "${TAB}Testing color ls alias... \c"
    timeout -s 9 1s \ls -ld --color=auto ./* &>/dev/null
    RETVAL=$?
    if [[ $RETVAL -eq 137 ]]; then
	      echo -e "${TAB}ls --color=auto ${BAD}FAIL${RESET}  ${GRAY}RETVAL=$RETVAL${RESET}"
	      unalias ls
	      echo -e "${TAB}--color=auto removed from ls alias"
    else
	      vecho -e "${GOOD}OK${RESET} ${GRAY}RETVAL=$RETVAL${RESET}"
    fi
fi

# Path additions
# ---------------
if [ "${VB}" = true ]; then
    echo "${TAB}Path additions..."
    itab
fi

# PGI
if $do_load_pgi; then
    export PGI_DIR=/opt/pgi
    if [ -d $PGI_DIR ]; then
	      vecho "${TAB}adding PGI to path..."
	      if [[ ":$PATH" != *":${PGI_DIR}"*  ]]; then
	          export PATH=$PGI_DIR/linux86-64/19.10/bin:$PATH
	      else
	          vecho "${TAB}${PGI_DIR} already in PATH"
	      fi

	      if [[ ":$MANPATH" != *":${PGI_DIR}"*  ]]; then
	          export MANPATH=$MANPATH:$PGI_DIR/linux86-64/19.10/man
	      else
	          vecho "${TAB}${PGI_DIR} already in MANPATH"
	      fi
	      export LM_LICENSE_FILE=$LM_LICENSE_FILE:$PGI_DIR/license.dat;
    else
	      echo "${TAB}${PGI_DIR} not found"
    fi
fi

# NVIDIA HPC SDK
if $do_load_nvidia; then
    export NV_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/compilers
    if [ -d $NV_DIR ]; then
	      vecho "${TAB}adding NVIDIA to path..."
	      if [[ ":$MANPATH" != *":${NV_DIR}"*  ]]; then
	          MANPATH=$MANPATH:$NV_DIR/man; export MANPATH
	      else
	          vvecho "${TAB}${NV_DIR} already in MANPATH"
	      fi
	      if [[ ":$PATH" != *":${NV_DIR}"*  ]]; then
	          PATH=$NV_DIR/bin:$PATH; export PATH
	      else
	          vecho "${TAB}${NV_DIR} already in PATH"
	      fi
    else
	      echo "${TAB}${NV_DIR} not found"
    fi
fi

ADDPATH=${HOME}/.local/bin
if [[ ":$PATH" != *":${ADDPATH}"*  ]]; then
    if [ -d "${ADDPATH}" ] ; then
	      vecho -n "${TAB}appending ${ADDPATH} to PATH... "
	      export PATH=$PATH:$ADDPATH
	      vecho "done"
    else
	      echo "${TAB}${ADDPATH} not found"
    fi
else
    vecho "${TAB}${ADDPATH} already in PATH"
fi

# deallocate variables
unset ADDPATH
unset do_load_nvidia
unset do_load_pgi
unset do_test_git
unset do_test_color
unset git_bad

if [ "${VB}" = true ]; then
    # reset tab
    dtab 2 # once for path, once for file
fi
