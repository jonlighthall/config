# ~/config/linux/.bashrc
# Interactive shell settings for linux kernel systems
# Note: this file must use unix line endings (LF)!
if [ -z $VB ]; then
    export VB=false
else
    if $VB; then
	# set tab
	fTAB="   "
	TAB+=$fTAB
	# load formatting
	fpretty=${HOME}/utils/bash/.bashrc_pretty
	if [ -e $fpretty ]; then
	    source $fpretty
	fi
	# print source name at start
	echo "${TAB}running $BASH_SOURCE..."
	src_name=$(readlink -f $BASH_SOURCE)
	if [ ! "$BASH_SOURCE" = "$src_name" ]; then
	    echo -e "${TAB}${VALID}link${NORMAL} -> $src_name"
	fi
    fi
fi

# System-specific aliases and functions

# Prompt
git_branch() {
    git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
    # 2>/dev/null redirects stderr to null
    # sed -e '/^[^*]/d' deletes any lines not containing *
    # sed -e 's/* \(.*\)/ (\1)/' replaces the first instance of '* '
}

screen_pid() {
    echo ${STY} | cut -d "." -f1
}

if $VB; then
    echo "${TAB}Setting prompt..."
    fTAB="   "
    TAB+=$fTAB
    echo -n "${TAB}Checking Git... "
    if [ -z $(git_branch) ]; then
	echo "not in repository"
    else
	echo -e "on\e[36m$(git_branch)\e[0m branch"
    fi

    echo -n "${TAB}Checking screen session... "
    if [ -z "$STY" ]; then
	echo "not in screen"
    else
	echo -e "in screen session \e[35m$(screen_pid)\e[0m"
    fi
fi

if [ -z "$STY" ]; then
    export PS1='\e[0;32m$\e[0m' # stark
    export PS1='\[\e[1;32m\][\u@\h \[\e[34m\]\W\[\e[32m\]\e[35m$(git_branch)\e[32m]$\[\e[0m\] ' # user, host, base dir, branch
    export PS1='\[\e[1;32m\][\u@\h \[\e[34m\]\w\[\e[32m\]\e[35m$(git_branch)\e[32m]\n$\[\e[0m\] ' # full dir, prompt on new line
    export PS1='\[\e[1;32m\][\u@\h \[\e[34m\]\w\[\e[32m\]\e[35m$(git_branch)\e[32m]\n\e[0;37m\A\e[0;32m $\[\e[0m\] ' # time, prompt on new line
    export PS1='\e[0;37m\A\[\e[1;32m\][\u@\h \[\e[34m\]\w\[\e[32m\]\e[35m$(git_branch)\e[32m]$\[\e[0m\] ' # time, prompt on same line
    export PS1='\e[0;37m\A\[\e[1;32m\] \u@\h \[\e[34m\]\w\[\e[32m\]\e[35m$(git_branch)\e[32m\n$\[\e[0m\] ' # time before, new line, no brackets
    export PS1='\e[0;37m\A\[\e[1;32m\] \u@\[\e[1;35m\]\h\[\e[1;34m\] \w\[\e[32m\]\e[35m$(git_branch)\e[32m\n$\[\e[0m\] ' # time before, new line, no brackets, highlight host
    export PS1='\e[0;37m\A\[\e[0;32m\] \u@\[\e[1;34m\]\h\[\e[0;33m\] \w\[\e[0;32m\]\e[36m$(git_branch)\e[0;32m\n$\[\e[0m\] ' # time before, new line, no brackets, highlight host, git bash color
else
    export PS1='\e[0;37m\A\[\e[0;32m\] \u@\[\e[1;34m\]\h\[\e[0;33m\] \e[0;35m\]$STY\[\e[0;33m\] \w\[\e[0;32m\]\e[36m$(git_branch)\e[0;32m\n$\[\e[0m\] ' # time before, new line, no brackets, highlight host, git bash color
    export PS1='\e[0;37m\A\[\e[0;32m\] \u@\[\e[1;34m\]\h \e[0;35m\]$STY \[\e[0;33m\]\w \[\e[0;32m\]\e[36m$(git_branch)\e[0;32m\n$\[\e[0m\] ' # time before, new line, no brackets, highlight host, git bash color
    export PS1='\e[0;37m\A\[\e[0;32m\] \u@\[\e[1;34m\]\h \e[0;35m\]$(screen_pid) \[\e[0;33m\]\w \[\e[0;32m\]\e[36m$(git_branch)\e[0;32m\n$\[\e[0m\] ' # time before, new line, no brackets, highlight host, git bash color
fi

# Macros
alias naut='nautilus --no-desktop --browser ./ &'
alias term='gnome-terminal &'

## option switches
do_test_git=true
do_test_color=true
do_load_pgi=false
do_load_nvidia=false

# Test Git
if $do_test_git; then
    if $VB; then
	echo -e "${TAB}Testing Git prompt... \c"
    fi
    timeout -s 9 1s git branch &>/dev/null
    RETVAL=$?
    if [[ $RETVAL -eq 137 ]]; then
	echo -e "\n RETVAL = $RETVAL"
	echo " git branch ${BAD}timed out${NORMAL}"
	export PS1='\e[0;37m\A\[\e[0;32m\] \u@\[\e[1;34m\]\h\[\e[0;33m\] \w\[\e[0;32m\]\e[0;32m\n$\[\e[0m\] ' # no git
	echo -e " git branch removed from prompt\n"
    else
	if $VB; then
	    echo -e "${GOOD}OK${NORMAL}  ${gray}RETVAL=$RETVAL${NORMAL}"
	fi
    fi
fi
if $VB; then
    TAB=${TAB#$fTAB}
fi

# Test ls color
if $do_test_color; then
    if $VB; then
	echo -e "${TAB}Testing color ls alias... \c"
    fi
    timeout -s 9 1s \ls -ld --color=auto ./* &>/dev/null
    RETVAL=$?
    if [[ $RETVAL -eq 137 ]]; then
	echo -e "${TAB}ls --color=auto ${BAD}FAIL${NORMAL}  ${gray}RETVAL=$RETVAL${NORMAL}"
	unalias ls
	echo -e "${TAB}--color=auto removed from ls alias"
    else
	if $VB; then
	    echo -e "${GOOD}OK${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
	fi
    fi
fi

# PGI
if $do_load_pgi; then
    export PGI_DIR=/opt/pgi
    if [ -d $PGI_DIR ]; then
	if $VB; then
	    echo "${TAB}adding PGI to path..."
	fi
	if [[ ":$PATH" != *":${PGI_DIR}"*  ]]; then
	    export PATH=$PGI_DIR/linux86-64/19.10/bin:$PATH
	else
	    if $VB; then
		echo "${TAB}${PGI_DIR} already in PATH"
	    fi
	fi

	if [[ ":$MANPATH" != *":${PGI_DIR}"*  ]]; then
	    export MANPATH=$MANPATH:$PGI_DIR/linux86-64/19.10/man
	else
	    if $VB; then
		echo "${TAB}${PGI_DIR} already in MANPATH"
	    fi
	fi
	export LM_LICENSE_FILE=$LM_LICENSE_FILE:$PGI_DIR/license.dat;
    else
	echo "${TAB}${PGI_DIR} not found"
    fi
fi

# NVIDIA HPC SDK
if $do_load_nvidia; then
    export NV_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/compilers
    if [ -d $NV_DIR ]; then
	echo "${TAB}adding NVIDIA to path..."
	if [[ ":$MANPATH" != *":${NV_DIR}"*  ]]; then
	    MANPATH=$MANPATH:$NV_DIR/man; export MANPATH
	else
	    echo "${TAB}${NV_DIR} already in MANPATH"
	fi
	if [[ ":$PATH" != *":${NV_DIR}"*  ]]; then
	    PATH=$NV_DIR/bin:$PATH; export PATH
	else
	    echo "${TAB}${NV_DIR} already in PATH"
	fi
    else
	echo "${TAB}${NV_DIR} not found"
    fi
fi

# Path additions
ADDPATH=${HOME}/.local/bin
if [[ ":$PATH" != *":${ADDPATH}"*  ]]; then
    if [ -d "${ADDPATH}" ] ; then
	if $VB; then
	    echo -n "${TAB}adding ${ADDPATH} to PATH... "
	fi
	export PATH=$PATH:$ADDPATH
	echo "done"
    else
	echo "${TAB}${ADDPATH} not found"
    fi
else
    if $VB; then
	echo "${TAB}${ADDPATH} already in PATH"
    fi
fi

if $VB; then
    TAB=${TAB#$fTAB}
fi
