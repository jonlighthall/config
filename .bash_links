function check_target() {
    # print invocoking source or function
    decho "${TAB}BASH_SOURCE=${BASH_SOURCE[@]}"
    decho "${TAB}FUNCNAME=${FUNCNAME[@]}"
    if [ ${#FUNCNAME[@]} -gt 1 ]; then
        decho "${TAB}FUNCNAME[1]=${FUNCNAME[1]}"
    fi

    # check number of arguments
    if [ $# -lt 1 ]; then
        echo "number of arguments = $#"
        echo "One argument is required"
        echo "Please provide a target name"
        echo "$FUNCNAME TARGET"
        echo "where TARGET is the source file to be linked"
        exit 1
    fi
    # define target (source)
    local target=$(readlink -f "$1")

    # get the cursor position
    echo -en "\E[6n"
    read -sdR CURPOS
    local CURPOS=${CURPOS#*[}
    # get the x-position of the cursor
    local -i x_pos=${CURPOS#*;}
    #echo "${TAB}x_pos=${x_pos}"
    if [ ${x_pos} -eq 1 ]; then
        echo -n "${TAB}"
    fi

    # check if target exists
    echo -en "target file ${yellow}${target}${NORMAL}... "
    if [ -e "${target}" ]; then
        echo -e "${GOOD}exists${NORMAL}"
        itab
    else
        echo -e "${BAD}does not exist${NORMAL}"
        dtab
        return 1
    fi
}

function do_link() {
    # print invocoking source or function
    decho "${TAB}BASH_SOURCE=${BASH_SOURCE[@]}"
    decho "${TAB}FUNCNAME=${FUNCNAME[@]}"
    if [ ${#FUNCNAME[@]} -gt 1 ]; then
        decho "${TAB}FUNCNAME[1]=${FUNCNAME[1]}"
    fi

    # check number of arguments
    if [ $# -lt 2 ]; then
        echo "number of arguments = $#"
        echo "Two arguments are required"
        echo "Please provide a target and a link name"
        echo "$FUNCNAME TARGET LINK_NAME"
        echo "where TARGET is the source file and LINK_NAME is the destination file"
        exit 1
    fi
    # define target (source)
    local target="$1"

    # define link (destination)
    local link="$2"

    # check if target exists
    if [ ${#FUNCNAME[@]} -gt 1 ]; then
        if [[ ! ${FUNCNAME[1]} =~ "do_link" ]]; then
            check_target "$target" || return 1
        else
            decho "${TAB}${target##*/} alread checked"
        fi

    fi

    local target_dir=$(dirname "$target")
    if [[ "${target_dir}" == *".ssh" ]]; then
        echo "${TAB}Applying options for SSH configuration files..."

        # before linking, check parent directory permissions
        echo -n "${TAB}${target_dir} requires specific permissions: "
        local -i permOK=700
        echo "${permOK}"
        itab
        echo -n "${TAB}checking permissions... "
        local -i perm=$(stat -c "%a" ${target_dir})
        echo ${perm}
        if [[ ${perm} -gt ${permOK} ]]; then
            echo -en "${TAB}${GRH}changing permissions${NORMAL} to ${permOK}... "
            chmod ${permOK} ${target_dir}
            local RETVAL=$?
            if [ $RETVAL -eq 0 ]; then
                echo -e "${GOOD}OK${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
            else
                echo -e "${BAD}FAIL${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
            fi
        else
            echo -e "${TAB}permissions ${GOOD}OK${NORMAL}"
        fi
        dtab

        # ...and file permissions
        if [[ ${target##*/} = id* || ${target##*/} = config || ${target##*/} = authorized_keys* ]]; then
            echo -n "${TAB}${target##*/} requires specific permissions: "
            if [[ "${target}" == *"pub"* ]]; then
                local -i permOK=644
                echo -n "PUB "
            else
                local -i permOK=600
                echo -n "PRIV "
            fi
            echo "${permOK}"
            itab
            echo -n "${TAB}checking permissions... "
            local -i perm=$(stat -c "%a" ${target})
            echo ${perm}
            if [[ ${perm} -gt ${permOK} ]]; then
                echo -en "${TAB}${GRH}changing permissions${NORMAL} to ${permOK}... "
                chmod ${permOK} ${target}
                local RETVAL=$?
                if [ $RETVAL -eq 0 ]; then
                    echo -e "${GOOD}OK${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
                else
                    echo -e "${BAD}FAIL${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
                fi
            else
                echo -e "${TAB}permissions ${GOOD}OK${NORMAL}"
            fi
            dtab
        fi

        # check exclusions
        for fname in keys2 pub. \~ id_dsa; do
            if [[ ${target##*/} == *"$fname"* ]]; then
                echo -e "${TAB}${GRH}exclude${NORMAL} $fname: ${target##*/}"
                dtab
                retrun 0
            fi
        done

    fi # done with SSH settings

    # begin linking...
    echo -n "${TAB}link ${link}... "

    # first, check for existing copy
    if [ -L "${link}" ] || [ -f "${link}" ] || [ -d "${link}" ]; then
        itab
        echo -n "exists and "
        if [[ "${target}" -ef "${link}" ]]; then
            echo "already points to ${link##*/}"
            echo -n "${TAB}"
            ls -lhG --color=auto "${link}"
            echo "${TAB}skipping..."
            dtab 2
            return 0
        else
            # next, delete or backup existing copy
            local link_dir=$(dirname "${link}")
            if [ -w ${link} ] && [ -w ${link_dir} ]; then
                if [ $(diff -ebwB "${target}" "${link}" 2>&1 | wc -c) -eq 0 ]; then
                    echo "has the same contents"
                    echo -n "${TAB}deleting... "
                    rm -v "${link}"
                else
                    if [ -e "${link}" ]; then
                        echo "will be backed up..."
                        local mdate=$(date -r "${link}" +'%Y-%m-%d-t%H%M')
                    else
                        echo -n "is a broken link..."
                        local mdate=$(stat -c '%y' ${link} | sed 's/\(^[0-9-]*\) \([0-9:]*\)\..*$/\1-t\2/' | sed 's/://g')
                    fi
                    local link_copy="${link}_${mdate}"
                    mv -v "${link}" "${link_copy}" | sed "s/^/${TAB}/"
                fi
            else
                echo -n "${TAB}${BAD}cannot be written to"
                if [ "$EUID" -ne 0 ]; then
                    echo -e "${TAB}${GRH}This command must be run as root!${NORMAL}"
                fi
                dtab 2
                return 1
            fi
            dtab 2
        fi
        dtab
    else
        echo "does not exist"
    fi
    # then link
    echo -en "${TAB}${GRH}"
    hline 72
    echo "${TAB}making link... "
    if [[ "${target}" == *"_keys"* ]]; then
        ln -Pv "${target}" ${link} | sed "s/^/${TAB}PHYS: /"
    else
        ln -sv "${target}" ${link} | sed "s/^/${TAB}SYM: /"
    fi
    echo -ne "${TAB}"
    hline 72
    echo -en "${NORMAL}"
    dtab
    return 0

}

function do_link_exe() {
    # print invocoking source or function
    decho "${TAB}BASH_SOURCE=${BASH_SOURCE[@]}"
    decho "${TAB}FUNCNAME=${FUNCNAME[@]}"
    if [ ${#FUNCNAME[@]} -gt 1 ]; then
        decho "${TAB}FUNCNAME[1]=${FUNCNAME[1]}"
    fi

    # check number of arguments
    if [ $# -lt 2 ]; then
        echo "number of arguments = $#"
        echo "Two arguments are required"
        echo "Please provide a target and a link name"
        echo "$FUNCNAME TARGET LINK_NAME"
        echo "where TARGET is the source file and LINK_NAME is the destination file"
        exit 1
    fi
    # define target (source)
    local target="$1"

    # define link (destination)
    local link="$2"

    check_target "$target" || return 1

    # next, check file permissions
    if true; then
        echo -n "${TAB}${target##*/} requires specific permissions: "
        local permOK=500
        echo "${permOK}"
        itab
        echo -n "${TAB}checking permissions... "
        local perm=$(stat -c "%a" "${target}")
        echo ${perm}
        # the target files will have the required permissions added to the existing permissions
        if [[ ${perm} -le ${permOK} ]] || [[ ! (-f "${target}" && -x "${target}") ]]; then
            echo -en "${TAB}${GRH}adding permissions${NORMAL} to ${permOK}... "
            chmod +${permOK} "${target}" || chmod u+rx "${target}"
            local RETVAL=$?
            if [ $RETVAL -eq 0 ]; then
                echo -e "${GOOD}OK${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
            else
                echo -e "${BAD}FAIL${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
            fi
        else
            echo -e "${TAB}permissions ${GOOD}OK${NORMAL}"
        fi
        dtab
    fi

    # then link
    do_link "$target" "$link" || return 1
    return 0
}
