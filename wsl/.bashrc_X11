# Set DISPLAY for WSL2
# Note: this file must use unix line endings (LF)!
if [ -z $VB ]; then
    export VB=false
else
    if $VB; then
	# set tab
	fTAB="   "
	TAB+=$fTAB
	# print source name at start
	echo -n "${TAB}running $BASH_SOURCE"
	src_name=$(readlink -f $BASH_SOURCE)
	if [ ! "$BASH_SOURCE" = "$src_name" ]; then
	    echo -n " -> $src_name"
	fi
	echo "..."
	# source formatting
	fpretty=${HOME}/utils/bash/.bashrc_pretty
	if [ -e $fpretty ]; then
	    source $fpretty
	fi
    fi
fi
echo "${TAB}building candidate DISPLAY list..."
TAB+=$fTAB
display_list="localhost "
name_list=$(\grep nameserver /etc/resolv.conf | awk '{print $2}')
for name in $name_list
do
    display_list+="$name "
done
command_name="route.exe"
echo -n "${TAB}${command_name}... "
if command -v ${command_name} &> /dev/null; then
    echo "found"
    route_list=$(route.exe print | \grep -E '(0.0.0.0\s*){2}' | awk '{print $4}')
    for route in $route_list
    do
	display_list+="$route "
    done
else
    echo "${UL}not found${NORMAL}"
fi

for disp in $display_list
do
    export DISPLAY="${disp}:0.0"
    echo -n "${TAB}setting DISPLAY to $DISPLAY... "
    xpdyinfo -display $DISPLAY &>/dev/null
    retval=$?
    if xdpyinfo -display $DISPLAY &>/dev/null; then
	echo -e "${GOOD}OK${NORMAL} ($retval)"
	break
    else
	echo -e "${BAD}FAIL${NORMAL} ($retval)"
    fi
done
echo "${TAB}done"
TAB=${TAB#$fTAB}

# X Window
if [ -z "${DISPLAY}" ]; then
    export DISPLAY=localhost:0.0
    if $VB; then
	echo "${TAB}setting DISPLAY to $DISPLAY"
    fi
else
    if $VB; then
	echo "${TAB}DISPLAY set to $DISPLAY"
    fi
fi

alias xming='/mnt/c/Program\ Files\ \(x86\)/Xming/Xming.exe >/dev/null 2>&1 :0 -clipboard -multiwindow -silent-dup-error -logverbose 0 &'
alias vcx='/mnt/c/Program\ Files/VcXsrv/vcxsrv.exe >/dev/null 2>&1 :0 -ac -clipboard -multiwindow -silent-dup-error &'

# Check if xwin is running
# -x flag only match processes whose name (or command line if -f is
# specified) exactly match the pattern.

PROG="vcxsrv.exe"
if pgrep -x $PROG >/dev/null
then
    if $VB; then
	echo "${TAB}$PROG is already running"
    fi
    TAB=${TAB::-${#fTAB}}
    return 0
else
    DIR=/mnt/c/Program\ Files/VcXsrv
    if [ -d "$DIR" ]; then
	if $VB; then
	    echo -e "${TAB}found $DIR"
	fi
	if [ -f "$DIR/$PROG" ]; then
	    if $VB; then
		echo -e "${TAB}Launching $PROG... \c"
	    fi
	    (vcx)
	    retval=$?
	    if [[ $retval == 0 ]]; then
		if $VB; then
		    echo -e "${GOOD}OK${NORMAL} ($retval)"
		fi
		TAB=${TAB::-${#fTAB}}
		return 0
	    else
		if $VB; then
		    echo -e "${BAD}FAIL${NORMAL} ($retval)"
		    echo "${TAB}unaliasing $PROG..."
		fi
		unalias vcx 2>/dev/null
	    fi
	else
	    if $VB; then
		echo -e "${TAB}$PROG ${UL}not found${NORMAL}"
		echo "${TAB}unaliasing $PROG..."
	    fi
	    unalias vcx 2>/dev/null
	fi
    else
	if $VB; then
	    echo -e "${TAB}$DIR ${UL}not found${NORMAL}"
	    echo "${TAB}unaliasing $PROG..."
	fi
	unalias vcx 2>/dev/null
    fi
fi

PROG="Xming.exe"
if pgrep -x $PROG >/dev/null
then
    if $VB; then
	echo "${TAB}$PROG is already running"
    fi
    TAB=${TAB::-${#fTAB}}
    return 0
else
    DIR=/mnt/c/Program\ Files\ \(x86\)/Xming
    if [ -d "$DIR" ]; then
	if $VB; then
	    echo -e "${TAB}found $DIR"
	fi
	if [ -f "$DIR/$PROG" ]; then
	    if $VB; then
		echo -e "${TAB}Launching $PROG... \c"
	    fi
	    (xming)
	    retval=$?
	    if [[ $retval == 0 ]]; then
		if $VB; then
		    echo -e "${GOOD}OK${NORMAL} ($retval)"
		fi
		TAB=${TAB::-${#fTAB}}
		return 0
	    else
		if $VB; then
		    echo -e "${BAD}FAIL${NORMAL} ($retval)"
		    echo "${TAB}unaliasing $PROG..."
		fi
		unalias xming 2>/dev/null
	    fi
	else
	    if $VB; then
		echo -e "${TAB}$PROG ${UL}not found${NORMAL}"
		echo "${TAB}unaliasing $PROG..."
	    fi
	    unalias xming 2>/dev/null
	fi
    else
	if $VB; then
	    echo -e "${TAB}$DIR ${UL}not found${NORMAL}"
	    echo "${TAB}unaliasing $PROG..."
	fi
	unalias xming 2>/dev/null
    fi
fi
TAB=${TAB#$fTAB}
