# Set DISPLAY for WSL2
# Note: this file must use unix line endings (LF)!
if [ -z $VB ]; then
    export VB=false
else
    if $VB; then
	# set tab
	fTAB="   "
	TAB+=$fTAB
	# load formatting
	fpretty=${HOME}/utils/bash/.bashrc_pretty
	if [ -e $fpretty ]; then
	    source $fpretty
	fi
	# print source name at start
	echo -e "${TAB}running ${PSDIR}$BASH_SOURCE${NORMAL}..."
	src_name=$(readlink -f $BASH_SOURCE)
	if [ ! "$BASH_SOURCE" = "$src_name" ]; then
	    echo -e "${TAB}${VALID}link${NORMAL} -> $src_name"
	fi
    fi
fi

# NB: The X11 server must be lauchded first, before setting dispaly; otherwise the xdpyinfo tests
# will fail

alias xming='/mnt/c/Program\ Files\ \(x86\)/Xming/Xming.exe &>/dev/null :0 -clipboard -multiwindow -silent-dup-error -logverbose 0 &'
alias vcx='/mnt/c/Program\ Files/VcXsrv/vcxsrv.exe &>/dev/null :0 -ac -clipboard -multiwindow -silent-dup-error &'

# Check if xwin is running ${PSDIR}$
# -x flag only match processes whose name (or command line if -f is
# specified) exactly match the pattern.

PROG="vcxsrv.exe"
xPID=$(pgrep -x $PROG)
xOK=false
if [ ! -z $xPID ]; then
    xOK=true
    if $VB; then
	echo "${TAB}${PROG} already running ${PSDIR}with PID ${xPID}"
    fi
else
    if $VB; then
	echo "${TAB}attemping to launch ${PROG}..."
	TAB+=$fTAB
    fi
    DIR=/mnt/c/Program\ Files/VcXsrv
    if [ -d "$DIR" ]; then
	if $VB; then
	    echo -e "${TAB}found $DIR"
	fi
	if [ -f "$DIR/$PROG" ]; then
	    if $VB; then
		echo -e "${TAB}Launching $PROG... \c"
	    fi
	    (vcx)
	    RETVAL=$?
	    if [[ $RETVAL == 0 ]]; then
		xOK=true
		if $VB; then
		    echo -e "${GOOD}OK${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
		    xPID=$(pgrep -x $PROG)
		    if [ ! -z $xPID ]; then 
			echo "${TAB}$PROG running ${PSDIR}with PID ${xPID}"
		    fi
		fi
	    else
		if $VB; then
		    echo -e "${BAD}FAIL${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
		    echo "${TAB}unaliasing $PROG..."
		fi
		unalias vcx 2>/dev/null
	    fi
	else
	    if $VB; then
		echo -e "${TAB}$PROG ${UL}not found${NORMAL}"
		echo "${TAB}unaliasing $PROG..."
	    fi
	    unalias vcx 2>/dev/null
	fi
    else
	if $VB; then
	    echo -e "${TAB}$DIR ${UL}not found${NORMAL}"
	    echo "${TAB}unaliasing $PROG..."
	fi
	unalias vcx 2>/dev/null
    fi
    if $VB; then
	TAB=${TAB#$fTAB}
    fi
fi

if ! $xOK; then
    PROG="Xming.exe"
    xPID=$(pgrep -x $PROG)
    xOK=false
    if [ ! -z $xPID ];then
	xOK=true
	if $VB; then
	    echo "${TAB}${PROG} already running ${PSDIR}with PID ${xPID}"
	fi
    else
	if $VB; then
	    echo "${TAB}attemping to launch ${PROG}..."
	    TAB+=$fTAB
	fi
	DIR=/mnt/c/Program\ Files\ \(x86\)/Xming
	if [ -d "$DIR" ]; then
	    if $VB; then
		echo -e "${TAB}found $DIR"
	    fi
	    if [ -f "$DIR/$PROG" ]; then
		if $VB; then
		    echo -e "${TAB}Launching $PROG... \c"
		fi
		(xming)
		RETVAL=$?
		if [[ $RETVAL == 0 ]]; then
		    xOK=true
		    if $VB; then
			echo -e "${GOOD}OK${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
			xPID=$(pgrep -x $PROG)
			if [ ! -z $xPID ]; then 
			    echo "${TAB}$PROG running ${PSDIR}with PID ${xPID}"
			fi
		    fi
		else
		    if $VB; then
			echo -e "${BAD}FAIL${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
			echo "${TAB}unaliasing $PROG..."
		    fi
		    unalias xming 2>/dev/null
		fi
	    else
		if $VB; then
		    echo -e "${TAB}$PROG ${UL}not found${NORMAL}"
		    echo "${TAB}unaliasing $PROG..."
		fi
		unalias xming 2>/dev/null
	    fi
	else
	    if $VB; then
		echo -e "${TAB}$DIR ${UL}not found${NORMAL}"
		echo "${TAB}unaliasing $PROG..."
	    fi
	    unalias xming 2>/dev/null
	fi
	if $VB; then
	    TAB=${TAB#$fTAB}
	fi
    fi
fi

if $xOK; then
    dispOK=false
    if [ -z $DISPLAY ];then
	echo "${TAB}DISPLAY not set"
    else
	if $VB; then
	    echo -n "${TAB}DISPLAY set to $DISPLAY... "
	fi
	xdpyinfo -display $DISPLAY &>/dev/null
	RETVAL=$?
	if [[ $RETVAL == 0 ]]; then
	    dispOK=true
	    if $VB; then
		echo -e "${GOOD}OK${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
	    fi
	else
	    if $VB; then
		echo -e "${BAD}FAIL${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
	    fi
	    unset DISPLAY
	fi
    fi

    if ! $dispOK; then
	# try to determine WSL version
	WSL_ver=$(wsl.exe -l -v | \grep -a \* | sed 's/[^[:print:]]//g;s/  */ /g' | cut -d ' ' -f 4)
	if $VB; then
	    echo "${TAB}applying default DISPLAY for WSL version $WSL_ver"
	fi
	if [[ $WSL_ver == 2 ]]; then
	    # set default display for WSLg
	    export DISPLAY=:0
	else
	    export DISPLAY=localhost:0.0
	fi
	if $VB; then
	    echo -n "${TAB}setting DISPLAY to $DISPLAY... "
	fi
	xdpyinfo -display $DISPLAY &>/dev/null
	RETVAL=$?
	if [[ $RETVAL == 0 ]]; then
	    if $VB; then
		echo -e "${GOOD}OK${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
	    fi
	else
	    if $VB; then
		echo -e "${BAD}FAIL${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
		# check other values if FAIL
		echo "${TAB}building candidate DISPLAY list..."
		TAB+=$fTAB
	    fi
	    display_list="localhost "
	    name_list=$(\grep nameserver /etc/resolv.conf | awk '{print $2}')
	    for name in $name_list
	    do
		display_list+="$name "
	    done
	    command_name="route.exe"
	    if $VB; then
		echo -n "${TAB}${command_name}... "
	    fi
	    if command -v ${command_name} &>/dev/null; then
		if $VB; then
		    echo "found"
		fi
		route_list=$(route.exe print | \grep -E '(0.0.0.0\s*){2}' | awk '{print $4}')
		for route in $route_list
		do
		    display_list+="$route "
		done
	    else
		if $VB; then
		    echo "${UL}not found${NORMAL}"
		fi
	    fi
	    for disp in $display_list
	    do
		export DISPLAY="${disp}:0.0"
		if $VB; then
		    echo -n "${TAB}setting DISPLAY to $DISPLAY... "
		fi
		xdpyinfo -display $DISPLAY &>/dev/null
		RETVAL=$?
		if [[ $RETVAL == 0 ]]; then
		    if $VB; then
			echo -e "${GOOD}OK${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
		    fi
		    break
		else
		    if $VB; then
			echo -e "${BAD}FAIL${NORMAL} ${gray}RETVAL=$RETVAL${NORMAL}"
		    fi
		    unset DISPLAY
		fi
	    done
	    TAB=${TAB#$fTAB}

	    if [ -z "${DISPLAY}" ]; then
		echo -e "${TAB}${BAD}ERROR: ${NORMAL}DISPLAY not set"
	    else
		if $VB; then
		    echo "${TAB}DISPLAY set to $DISPLAY"
		fi
	    fi
	fi
    fi
else
    echo -e "${TAB}${BAD}ERROR: ${NORMAL}no X11 program ${UL}running"
    echo "${TAB}DISPLAY not set by $BASH_SOURCE"
    echo "${TAB}DISPLAY set to to $DISPLAY"
fi

TAB=${TAB#$fTAB}
